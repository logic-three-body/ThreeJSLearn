<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>源码对应电子书:百度"three.js 郭隆邦"</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            /* 隐藏body窗口区域滚动条 */
        }
    </style>
    <!--引入three.js三维引擎-->
    <script src="js/three.js"></script>
    <!-- 引入threejs扩展控件OrbitControls.js -->
    <script src="js/OrbitControls.js"></script>
</head>

<body>
    <script>
        var Rad = Math.PI / 180;
        /**
         * 创建场景对象Scene
         */
        var scene = new THREE.Scene();
        /**
         * 创建网格模型
         */
        var row = 10;
        var col = 10;
        var geometry = new THREE.PlaneGeometry(300, 300, row, col); //创建一个平面几何对象Geometry
        geometry.rotateX(-90 * Rad);

        geometry.name = "water";
        geometry.verticesNeedUpdate = true;

        // uv两个方向纹理重复数量
        //texture_norm.repeat.set(3, 3);
        var material = new THREE.MeshPhongMaterial({
            // color: 0x0000ff,
            side: THREE.DoubleSide, //两面可见
            shininess: 12,
        }); //材质对象Material
        var mesh = new THREE.Mesh(geometry, material); //网格模型对象Mesh
        var helper = new THREE.VertexNormalsHelper(mesh, 20, 0x00ff00, 1);
        scene.add(helper);
        // 辅助坐标系
        var axisHelper = new THREE.AxesHelper(250); //红色代表 X 轴. 绿色代表 Y 轴. 蓝色代表 Z 轴
        scene.add(axisHelper);
        scene.add(mesh); //网格模型添加到场景中
        /**
         * 光源设置
         */
        //点光源
        var point = new THREE.PointLight(0xffffff);
        point.position.set(400, 200, 300); //点光源位置
        scene.add(point); //点光源添加到场景中
        //环境光
        var ambient = new THREE.AmbientLight(0x444444);
        scene.add(ambient);
        //水面模拟参数
        var amplitude = 15.0;
        var frequency = 0.5;
        var phase = 1.0;
        var time = 0.0;
        var direct = new THREE.Vector2(1, 1);

        function wave(amplitude, frequency, phase, time, dir) {
            for (var i = 0; i <= row + 1; ++i) {
                for (var j = 0; j <= col; ++j) {
                    var waterheight = amplitude * Math.sin((dir.x * i + dir.y * j) * frequency + time);
                    //处理顶点
                    var p = geometry.vertices[i * col + j];
                    p.y = waterheight;
                    geometry.vertices[i * col + j] = p;
                    //处理法线
                    // geometry.computeFlatVertexNormals();
                    //geometry.computeVertexNormals(false);
                    //切线法求法线失败了
                    //var tagentChange = amplitude * Math.cos((dir.x * i + dir.y * j) * frequency + time);
                    //var tagent = new THREE.Vector3(1, tagentChange, 0).normalize();
                    //geometry.faces[i * col + j].VertexNormals = new THREE.Vector3(-tagent.y, tagent.x,
                    //0);

                }
            }
            geometry.verticesNeedUpdate = true;
            //循环内部调用效率低
            geometry.computeVertexNormals(false);
            // geometry.computeFaceNormals();
            //geometry.normalsNeedUpdate = true;
        }

        //自计算法线
        function wave2(amplitude, frequency, phase, time, dir) {
            for (var i = 0; i < geometry.faces.length; ++i) {
                //变量三角面三个顶点
                var Vernum1 = geometry.faces[i].a;
                var Vernum2 = geometry.faces[i].b;
                var Vernum3 = geometry.faces[i].c;

                var vA = geometry.vertices[Vernum1];
                var vB = geometry.vertices[Vernum2];
                var vC = geometry.vertices[Vernum3];

                var cb = new THREE.Vector3(),
                    ab = new THREE.Vector3();

                cb.subVectors(vC, vB);
                ab.subVectors(vA, vB);
                cb.cross(ab);

                //处理顶点
                var waterheight1 = amplitude * Math.sin((vA.x * i) * frequency + time);
                var waterheight2 = amplitude * Math.sin((vB.x * i) * frequency + time);
                var waterheight3 = amplitude * Math.sin((vC.x * i) * frequency + time);

                vA.y = waterheight1;
                vB.y = waterheight2;
                vC.y = waterheight3;
                geometry.verticesNeedUpdate = true;

                //处理法线
                for (var v = 0; v < geometry.faces[i].vertexNormals.length; ++v) {
                    geometry.faces[i].vertexNormals[v].copy(cb.normalize()); //使用=不行，需要调用copy传递属性
                    geometry.normalsNeedUpdate = true;
                }


                //切线法求法线失败了
                // var tagentChange1 = i * amplitude * Math.cos((vA.x * i) * frequency + time);
                // var tagent1 = new THREE.Vector3(1, tagentChange1, 0).normalize();
                // var tagentChange2 = i * amplitude * Math.cos((vB.x * i) * frequency + time);
                // var tagent2 = new THREE.Vector3(1, tagentChange2, 0).normalize();
                // var tagentChange3 = i * amplitude * Math.cos((vC.x * i) * frequency + time);
                // var tagent3 = new THREE.Vector3(1, tagentChange3, 0).normalize();
                //处理顶点法向量
                // geometry.faces[i].vertexNormals[0] = new THREE.Vector3(-tagent1.y, tagent1.x, 0);
                // geometry.normalsNeedUpdate = true;
                // geometry.faces[i].vertexNormals[1] = new THREE.Vector3(-tagent2.y, tagent2.x, 0);
                // geometry.normalsNeedUpdate = true;
                // geometry.faces[i].vertexNormals[2] = new THREE.Vector3(-tagent3.y, tagent3.x, 0);
                // geometry.normalsNeedUpdate = true;
            }
        }

        //自计算法线
        function wave3(amplitude, frequency, phase, time, dir) {
            for (var i = 0; i < geometry.faces.length; ++i) {
                //变量三角面三个顶点
                var Vernum1 = geometry.faces[i].a;
                var Vernum2 = geometry.faces[i].b;
                var Vernum3 = geometry.faces[i].c;

                var vA = geometry.vertices[Vernum1];
                var vB = geometry.vertices[Vernum2];
                var vC = geometry.vertices[Vernum3];

                //处理顶点
                var waterheight1 = amplitude * Math.sin((vA.x * i) * frequency + time);
                var waterheight2 = amplitude * Math.sin((vB.x * i) * frequency + time);
                var waterheight3 = amplitude * Math.sin((vC.x * i) * frequency + time);

                vA.y = waterheight1;
                vB.y = waterheight2;
                vC.y = waterheight3;
                geometry.verticesNeedUpdate = true;

                //处理法线 循环内调用api效率低
                //geometry.computeVertexNormals(true);

            }
            geometry.computeVertexNormals(false);

        }

        //自计算法线
        function wave4(amplitude, frequency, phase, time, dir) {
            for (var i = 0; i < geometry.faces.length; ++i) {
                //变量三角面三个顶点
                var Vernum1 = geometry.faces[i].a;
                var Vernum2 = geometry.faces[i].b;
                var Vernum3 = geometry.faces[i].c;

                var vA = geometry.vertices[Vernum1];
                var vB = geometry.vertices[Vernum2];
                var vC = geometry.vertices[Vernum3];

                var cb = new THREE.Vector3(),
                    ab = new THREE.Vector3();

                cb.subVectors(vC, vB);
                ab.subVectors(vA, vB);
                cb.cross(ab);

                //处理顶点
                var waterheight1 = amplitude * Math.sin((vA.x * i) * frequency + time);
                var waterheight2 = amplitude * Math.sin((vB.x * i) * frequency + time);
                var waterheight3 = amplitude * Math.sin((vC.x * i) * frequency + time);

                vA.y = waterheight1;
                vB.y = waterheight2;
                vC.y = waterheight3;
                geometry.verticesNeedUpdate = true;

                // //处理法线
                // for (var v = 0; v < geometry.faces[i].vertexNormals.length; ++v) {
                //     geometry.faces[i].vertexNormals[v].copy(cb.normalize()); //使用=不行，需要调用copy传递属性
                //     geometry.normalsNeedUpdate = true;
                // }


                //切线法求法线失败了
                var tagentChange1 = i * amplitude * Math.cos((vA.x * i) * frequency + time);
                var tagent1 = new THREE.Vector3(1, tagentChange1, 0).normalize();
                var tagentChange2 = i * amplitude * Math.cos((vB.x * i) * frequency + time);
                var tagent2 = new THREE.Vector3(1, tagentChange2, 0).normalize();
                var tagentChange3 = i * amplitude * Math.cos((vC.x * i) * frequency + time);
                var tagent3 = new THREE.Vector3(1, tagentChange3, 0).normalize();
                //处理顶点法向量
                geometry.faces[i].vertexNormals[0].copy(new THREE.Vector3(-tagent1.y, tagent1.x, 0));
                geometry.normalsNeedUpdate = true;
                geometry.faces[i].vertexNormals[1].copy(new THREE.Vector3(-tagent2.y, tagent2.x, 0));
                geometry.normalsNeedUpdate = true;
                geometry.faces[i].vertexNormals[2].copy(new THREE.Vector3(-tagent3.y, tagent3.x, 0));
                geometry.normalsNeedUpdate = true;
            }
        }

        /**
         * 相机设置
         */
        var width = window.innerWidth; //窗口宽度
        var height = window.innerHeight; //窗口高度
        var k = width / height; //窗口宽高比
        var s = 150; //三维场景显示范围控制系数，系数越大，显示的范围越大
        //创建相机对象
        var camera = new THREE.OrthographicCamera(-s * k, s * k, s, -s, 1, 1000);
        camera.position.set(200, 300, 200); //设置相机位置
        camera.lookAt(scene.position); //设置相机方向(指向的场景对象)
        /**
         * 创建渲染器对象
         */
        var renderer = new THREE.WebGLRenderer();
        renderer.setSize(width, height); //设置渲染区域尺寸
        renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色
        document.body.appendChild(renderer.domElement); //body元素中插入canvas对象

        // 渲染函数
        function render2() {
            wave3(amplitude, frequency, phase, time += 0.1, direct);
            requestAnimationFrame(render2);
            renderer.render(scene, camera); //执行渲染操作
        }
        render2();
        //创建控件对象  相机对象camera作为参数   控件可以监听鼠标的变化，改变相机对象的属性
        var controls = new THREE.OrbitControls(camera, renderer.domElement);
        //监听鼠标事件，触发渲染函数，更新canvas画布渲染效果
        controls.addEventListener('change', render);
    </script>

</body>

</html>
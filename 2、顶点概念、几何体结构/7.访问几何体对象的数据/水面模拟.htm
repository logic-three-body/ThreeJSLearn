<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>源码对应电子书:百度"three.js 郭隆邦"</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            /* 隐藏body窗口区域滚动条 */
        }
    </style>
    <!--引入three.js三维引擎-->
    <script src="http://www.yanhuangxueyuan.com/versions/threejsR92/build/three.js"></script>
    <!-- 引入threejs扩展控件OrbitControls.js -->
    <script src="http://www.yanhuangxueyuan.com/versions/threejsR92/examples/js/controls/OrbitControls.js"></script>
</head>

<body>
    <script>
        var Rad = Math.PI / 180;
        /**
         * 创建场景对象Scene
         */
        var scene = new THREE.Scene();
        /**
         * 创建网格模型
         */
        // var geometry = new THREE.BoxGeometry(100, 100, 100); //创建一个立方体几何对象Geometry
        // console.log(geometry);
        // console.log('几何体顶点位置数据',geometry.vertices);
        // console.log('三角面数据',geometry.faces);
        var row = 30;
        var col = 30;
        var geometry = new THREE.PlaneGeometry(300, 300, row, col); //创建一个平面几何对象Geometry
        geometry.rotateX(-90 * Rad);

        geometry.name = "water";
        geometry.verticesNeedUpdate = true;
        var textureLoader = new THREE.TextureLoader();
        var texture = textureLoader.load('water.jpg'); // 加载纹理贴图
        var texture_norm = textureLoader.load('water_norm1.jpeg'); // 加载法线贴图      
        // 设置阵列
        texture.wrapS = THREE.RepeatWrapping;
        texture.wrapT = THREE.RepeatWrapping;
        // uv两个方向纹理重复数量
        texture.repeat.set(2, 2);
        texture_norm.wrapS = THREE.RepeatWrapping;
        texture_norm.wrapT = THREE.RepeatWrapping;
        // uv两个方向纹理重复数量
        //texture_norm.repeat.set(3, 3);
        var material = new THREE.MeshPhongMaterial({
            color: 0x0000ff,
            side: THREE.DoubleSide, //两面可见
            // specular: 0x4488ee,
            shininess: 12,
            // map: texture, // 设置纹理贴图
            // normalMap: texture_norm,
            normalScale: new THREE.Vector2(1.5, 1.5),
            wireframe: true, //线框模式渲染
        }); //材质对象Material
        var mesh = new THREE.Mesh(geometry, material); //网格模型对象Mesh
        // 辅助坐标系
        var axisHelper = new THREE.AxesHelper(250); //红色代表 X 轴. 绿色代表 Y 轴. 蓝色代表 Z 轴
        scene.add(axisHelper);
        scene.add(mesh); //网格模型添加到场景中
        /**
         * 光源设置
         */
        //点光源
        var point = new THREE.PointLight(0xffffff);
        point.position.set(400, 200, 300); //点光源位置
        scene.add(point); //点光源添加到场景中
        //环境光
        var ambient = new THREE.AmbientLight(0x444444);
        scene.add(ambient);
        //水面模拟参数
        var amplitude = 5.0;
        var frequency = 0.5;
        var phase = 1.0;
        var time = 0.0;
        var direct = new THREE.Vector2(1, 1);

        function wave(amplitude, frequency, phase, time, dir) {

            for (var i = 0; i <= row + 1; ++i) {
                for (var j = 0; j <= col; ++j) {
                    var waterheight = amplitude * Math.sin((dir.x * i + dir.y * j) * frequency + time);
                    //处理顶点
                    var p = geometry.vertices[i * col + j];
                    p.y = waterheight;
                    geometry.vertices[i * col + j] = p;
                    //处理法线
                    var tagentChange = amplitude * Math.cos((dir.x * i + dir.y * j) * frequency + time);
                    var tagent = new THREE.Vector3(1, tagentChange, 0).normalize();
                    geometry.faces[Math.round((i * col + j) / 3)].VertexNormals = new THREE.Vector3(-tagent.y, tagent.x,
                        0);
                }
            }
            geometry.verticesNeedUpdate = true;
            geometry.normalsNeedUpdate = true;
        }

        /**
         * 相机设置
         */
        var width = window.innerWidth; //窗口宽度
        var height = window.innerHeight; //窗口高度
        var k = width / height; //窗口宽高比
        var s = 150; //三维场景显示范围控制系数，系数越大，显示的范围越大
        //创建相机对象
        var camera = new THREE.OrthographicCamera(-s * k, s * k, s, -s, 1, 1000);
        camera.position.set(200, 300, 200); //设置相机位置
        camera.lookAt(scene.position); //设置相机方向(指向的场景对象)
        /**
         * 创建渲染器对象
         */
        var renderer = new THREE.WebGLRenderer();
        renderer.setSize(width, height); //设置渲染区域尺寸
        renderer.setClearColor(0xb9d3ff, 1); //设置背景颜色
        document.body.appendChild(renderer.domElement); //body元素中插入canvas对象

        // 渲染函数
        function render() {
            renderer.render(scene, camera); //执行渲染操作
        }
        //render();

        //let T02 = new Date(); //上次时间
        function render2() {
            //let T12 = new Date(); //本次时间
            //let t = T12 - T02; //时间差
            // T02 = T12; //把本次时间赋值给上次时间
            requestAnimationFrame(render2);
            renderer.render(scene, camera); //执行渲染操作
            wave(amplitude, frequency, phase, time += 0.1, direct);
            texture.offset.x -= time / 80000;
            texture.offset.y -= time / 50000;
            // 设置纹理旋转角度
            texture.center.set(0, 0);
            texture.rotation = Math.PI / -time;
            // 设置纹理的旋转中心，默认(0,0)
            if (time > 1) time / 10;
        }
        render2();
        //创建控件对象  相机对象camera作为参数   控件可以监听鼠标的变化，改变相机对象的属性
        var controls = new THREE.OrbitControls(camera, renderer.domElement);
        //监听鼠标事件，触发渲染函数，更新canvas画布渲染效果
        controls.addEventListener('change', render);
    </script>

</body>

</html>